<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Core</name>
    </assembly>
    <members>
        <member name="T:Core.Collections.Generic.LinkedListNodeExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.LinkedListNode`1"/>.
            </summary>
        </member>
        <member name="M:Core.Collections.Generic.LinkedListNodeExtensions.IsFirst``1(System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.LinkedListNode`1"/> instance is the first node in a linked list.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:System.Collections.Generic.LinkedListNode`1"/>.</typeparam>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> instance to test.</param>
            <returns>True if the node is the first in the linked list; otherwise, false.</returns>
        </member>
        <member name="M:Core.Collections.Generic.LinkedListNodeExtensions.IsLast``1(System.Collections.Generic.LinkedListNode{``0})">
            <summary>
            Determines whether a <see cref="T:System.Collections.Generic.LinkedListNode`1"/> instance is the last node in a linked list.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:System.Collections.Generic.LinkedListNode`1"/>.</typeparam>
            <param name="node">The <see cref="T:System.Collections.Generic.LinkedListNode`1"/> instance to test.</param>
            <returns>True id the node is the first in the linked list; otherwise, false.</returns>
        </member>
        <member name="T:Core.Data.IAsyncRepository`2">
            <summary>
            Represents the base contract for implementing an asynchronous repository.
            </summary>
            <typeparam name="TKey">The underlying key type.</typeparam>
            <typeparam name="TModel">The underlying model type.</typeparam>
        </member>
        <member name="M:Core.Data.IAsyncRepository`2.FindByIdAsync(`0)">
            <summary>
            Finds an item in the repository using the provided key.
            </summary>
            <param name="id">The key for which to get an item from the repository.</param>
            <returns>At item whose key matches the given key.</returns>
        </member>
        <member name="M:Core.Data.IAsyncRepository`2.GetAllAsync">
            <summary>
            Gets all items from the repository.
            </summary>
            <returns>All items from the repository.</returns>
        </member>
        <member name="M:Core.Data.IAsyncRepository`2.AddAsync(`1)">
            <summary>
            Adds an item to the repository.
            </summary>
            <param name="item">The item to add to the repository.</param>
        </member>
        <member name="M:Core.Data.IAsyncRepository`2.AddRangeAsync(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a collection of items to the repository.
            </summary>
            <param name="items">The collection of items to add to the repository.</param>
        </member>
        <member name="M:Core.Data.IAsyncRepository`2.RemoveAsync(`1)">
            <summary>
            Removes an item from the repository.
            </summary>
            <param name="item">The item to remove from the repository.</param>
        </member>
        <member name="M:Core.Data.IAsyncRepository`2.RemoveRangeAsync(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes a collection of items from the repository.
            </summary>
            <param name="items">The collection of items to remove from the repository.</param>
        </member>
        <member name="T:Core.Data.IAsyncSpecificationRepository`1">
            <summary>
            Represents the base contract for asynchronous repositories that are able to query a data source by specification.
            </summary>
            <typeparam name="TModel">The underlying model type.</typeparam>
        </member>
        <member name="M:Core.Data.IAsyncSpecificationRepository`1.FindSingleBySpecificationAsync(Core.Design.Specification{`0})">
            <summary>
            Finds a single item in the data source by specification.
            </summary>
            <param name="specification">The specification for the item to find in the data source.</param>
            <returns>A single item from the data source that matches the specification.</returns>
        </member>
        <member name="M:Core.Data.IAsyncSpecificationRepository`1.FindAllBySpecificationAsync(Core.Design.Specification{`0})">
            <summary>
            Finds all items in the data source by specification.
            </summary>
            <param name="specification">The specification for the items to find in the data source.</param>
            <returns>All items from the data source that match the specification.</returns>
        </member>
        <member name="T:Core.Data.IAsyncUnitOfWork">
            <summary>
            Represents the base contract for implementing the unit of work pattern using async/await.
            </summary>
        </member>
        <member name="M:Core.Data.IAsyncUnitOfWork.SaveChangesAsync">
            <summary>
            Commits a unit of work.
            </summary>
            <returns>The number of changes that were successfully committed in the unit of work.</returns>
        </member>
        <member name="T:Core.Data.IRepository`2">
            <summary>
            Represents the base contract for implementing a repository.
            </summary>
            <typeparam name="TKey">The underlying key type.</typeparam>
            <typeparam name="TModel">The underlying model type.</typeparam>
        </member>
        <member name="M:Core.Data.IRepository`2.FindById(`0)">
            <summary>
            Finds an item in the repository using the provided key.
            </summary>
            <param name="id">The key for which to get an item from the repository.</param>
            <returns>At item whose key matches the given key.</returns>
        </member>
        <member name="M:Core.Data.IRepository`2.GetAll">
            <summary>
            Gets all items from the repository.
            </summary>
            <returns>All items from the repository.</returns>
        </member>
        <member name="M:Core.Data.IRepository`2.Add(`1)">
            <summary>
            Adds an item to the repository.
            </summary>
            <param name="item">The item to add to the repository.</param>
        </member>
        <member name="M:Core.Data.IRepository`2.AddRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Adds a collection of items to the repository.
            </summary>
            <param name="items">The collection of items to add to the repository.</param>
        </member>
        <member name="M:Core.Data.IRepository`2.Remove(`1)">
            <summary>
            Removes an item from the repository.
            </summary>
            <param name="item">The item to remove from the repository.</param>
        </member>
        <member name="M:Core.Data.IRepository`2.RemoveRange(System.Collections.Generic.IEnumerable{`1})">
            <summary>
            Removes a collection of items from the repository.
            </summary>
            <param name="items">The collection of items to remove from the repository.</param>
        </member>
        <member name="T:Core.Data.ISpecificationRepository`1">
            <summary>
            Represents the base contract for repositories that are able to query a data source by specification.
            </summary>
            <typeparam name="TModel">The underlying model type.</typeparam>
        </member>
        <member name="M:Core.Data.ISpecificationRepository`1.FindSingleBySpecification(Core.Design.Specification{`0})">
            <summary>
            Finds a single item in the data source by specification.
            </summary>
            <param name="specification">The specification for the item to find in the data source.</param>
            <returns>A single item from the data source that matches the specification.</returns>
        </member>
        <member name="M:Core.Data.ISpecificationRepository`1.FindAllBySpecification(Core.Design.Specification{`0})">
            <summary>
            Finds all items in the data source by specification.
            </summary>
            <param name="specification">The specification for the items to find in the data source.</param>
            <returns>All items from the data source that match the specification.</returns>
        </member>
        <member name="T:Core.Data.IUnitOfWork">
            <summary>
            Represents the base contract for implementing the unit of work pattern.
            </summary>
        </member>
        <member name="M:Core.Data.IUnitOfWork.SaveChanges">
            <summary>
            Commits a unit of work.
            </summary>
            <returns>The number of changes that were successfully committed in the unit of work.</returns>
        </member>
        <member name="T:Core.Design.AndSpecification`1">
            <summary>
            Represents a binary AND combination of two specifications.
            </summary>
            <typeparam name="T">The underlying type of the specification.</typeparam>
        </member>
        <member name="F:Core.Design.AndSpecification`1.left">
            <summary>
            The left hand side of the binary expression.
            </summary>
        </member>
        <member name="F:Core.Design.AndSpecification`1.right">
            <summary>
            The right hand side of the binary expression.
            </summary>
        </member>
        <member name="M:Core.Design.AndSpecification`1.#ctor(Core.Design.Specification{`0},Core.Design.Specification{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Design.AndSpecification`1"/> class.
            </summary>
            <param name="left">The left hand specification.</param>
            <param name="right">The right hand specification.</param>
        </member>
        <member name="M:Core.Design.AndSpecification`1.ToExpression">
            <summary>
            Provides an expression for the specification.
            </summary>
            <returns>An expression for the specification.</returns>
        </member>
        <member name="T:Core.Design.EmptySpecification`1">
            <summary>
            Represents an empty specification that always returns true.
            </summary>
            <typeparam name="T">The underlying type of the specification.</typeparam>
        </member>
        <member name="M:Core.Design.EmptySpecification`1.ToExpression">
            <summary>
            Provides an expression for the specification.
            </summary>
            <returns>An expression for the specification.</returns>
        </member>
        <member name="T:Core.Design.Enumeration">
            <summary>
            Represents a base class for implementing the strongly typed enumeration pattern.
            </summary>
        </member>
        <member name="M:Core.Design.Enumeration.#ctor(System.Int32,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Design.Enumeration"/> class.
            </summary>
            <param name="value">The enumeration value.</param>
            <param name="name">The  enumeration name.</param>
        </member>
        <member name="P:Core.Design.Enumeration.Value">
            <summary>
            Gets or sets the value of the enumeration.
            </summary>
        </member>
        <member name="P:Core.Design.Enumeration.Name">
            <summary>
            Gets or sets the name of the enumeration.
            </summary>
        </member>
        <member name="M:Core.Design.Enumeration.op_Equality(Core.Design.Enumeration,Core.Design.Enumeration)">
            <summary>
            Performs an equality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.op_Inequality(Core.Design.Enumeration,Core.Design.Enumeration)">
            <summary>
            Performs an inequality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.GetMembers``1">
            <summary>
            Gets all of the publicly visible enumeration members for a given enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <returns>A collection of enumeration members.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.GetNames``1">
            <summary>
            Gets all the publicly visible enumeration names for a given enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <returns>A collection of enumeration names.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.GetName``1(System.Int32)">
            <summary>
            Gets the name associated with the specified value for a given enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The value for which to get the associated name.</param>
            <returns>The name of the given enumeration.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.GetValues``1">
            <summary>
            Gets all the publicly visible enumeration values for a given enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <returns>A collection of enumeration values.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.GetValue``1(System.String)">
            <summary>
            Gets the value associated with the specified name for a given enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="name">The name for which to get the associated value.</param>
            <returns>The value of the given enumeration.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.IsDefined``1(System.Int32)">
            <summary>
            Determines whether an enumeration value is defined.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The value to check.</param>
            <returns>True if the value is defined by the enumeration; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.IsDefined``1(System.String)">
            <summary>
            Determines whether an enumeration name is defined.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="name">The name to check.</param>
            <returns>True if the name is defined by the enumeration; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.Parse``1(System.Int32)">
            <summary>
            Parses a value to an enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The value to parse.</param>
            <returns>An enumeration instance if one exists for the specified value; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.Parse``1(System.String)">
            <summary>
            Parses a name to an enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="name">The name to parse.</param>
            <returns>An enumeration instance if one exists for the specified name; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.TryParse``1(System.Int32,``0@)">
            <summary>
            Attempts to parse the specified value into an enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="value">The value to parse.</param>
            <param name="result">The resulting enumeration if the parse succeeds.</param>
            <returns>True if parsing the value into an enumeration type succeeds; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.TryParse``1(System.String,``0@)">
            <summary>
            Attempts to parse the specified name into an enumeration type.
            </summary>
            <typeparam name="TEnum">The enumeration type.</typeparam>
            <param name="name">The name to parse.</param>
            <param name="result">The resulting enumeration if the parse succeeds.</param>
            <returns>True if parsing the name into an enumeration type succeeds; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.Equals(Core.Design.Enumeration)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="other">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.GetHashCode">
            <summary>
            Serves as a hash code function for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:Core.Design.Enumeration.ToString">
            <summary>
            Returns a string that represents the current object.
            </summary>
            <returns>A string that represents the current object.</returns>
        </member>
        <member name="T:Core.Design.Freezable`1">
            <summary>
            Represents a generic implementation of the Freezable pattern.
            </summary>
            <typeparam name="T">The underlying type of the freezable object.</typeparam>
        </member>
        <member name="F:Core.Design.Freezable`1.value">
            <summary>
            The freezable value.
            </summary>
        </member>
        <member name="M:Core.Design.Freezable`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Design.Freezable`1"/> class.
            </summary>
        </member>
        <member name="M:Core.Design.Freezable`1.#ctor(`0)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Design.Freezable`1"/> class.
            </summary>
            <param name="value">An initialization value.</param>
        </member>
        <member name="P:Core.Design.Freezable`1.Value">
            <summary>
            Gets or sets the freezable value.
            </summary>
        </member>
        <member name="P:Core.Design.Freezable`1.IsFrozen">
            <summary>
            Gets a value to determine whether the object is frozen.
            </summary>
        </member>
        <member name="M:Core.Design.Freezable`1.Freeze">
            <summary>
            Freezes the object's value.
            </summary>
        </member>
        <member name="T:Core.Design.NotSpecification`1">
            <summary>
            Represents a binary NOT negation of a specification.
            </summary>
            <typeparam name="T">The underlying type of the specification.</typeparam>
        </member>
        <member name="F:Core.Design.NotSpecification`1.expression">
            <summary>
            The specification expression.
            </summary>
        </member>
        <member name="M:Core.Design.NotSpecification`1.#ctor(Core.Design.Specification{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Design.NotSpecification`1"/> class.
            </summary>
            <param name="specification">The specification to negate.</param>
        </member>
        <member name="M:Core.Design.NotSpecification`1.ToExpression">
            <summary>
            Provides an expression for the specification.
            </summary>
            <returns>An expression for the specification.</returns>
        </member>
        <member name="T:Core.Design.OrSpecification`1">
            <summary>
            Represents a binary OR combination of two specifications.
            </summary>
            <typeparam name="T">The underlying type of the specification.</typeparam>
        </member>
        <member name="F:Core.Design.OrSpecification`1.left">
            <summary>
            The left hand side of the binary expression.
            </summary>
        </member>
        <member name="F:Core.Design.OrSpecification`1.right">
            <summary>
            The right hand side of the binary expression.
            </summary>
        </member>
        <member name="M:Core.Design.OrSpecification`1.#ctor(Core.Design.Specification{`0},Core.Design.Specification{`0})">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Design.OrSpecification`1"/> class.
            </summary>
            <param name="left">The left hand specification.</param>
            <param name="right">The right hand specification.</param>
        </member>
        <member name="M:Core.Design.OrSpecification`1.ToExpression">
            <summary>
            Provides an expression for the specification.
            </summary>
            <returns>An expression for the specification.</returns>
        </member>
        <member name="T:Core.Design.Specification`1">
            <summary>
            Represents a base class for implementing the specification pattern.
            </summary>
            <typeparam name="T">The underlying type of the specification implementation.</typeparam>
        </member>
        <member name="F:Core.Design.Specification`1.Empty">
            <summary>
            Provides an empty specification that always returns true.
            </summary>
        </member>
        <member name="M:Core.Design.Specification`1.IsSatisfiedBy(`0)">
            <summary>
            Determines whether the specification is satisfied by the provided parameter.
            </summary>
            <param name="item">The parameter to test against the specification.</param>
            <returns>True if the item satisfies the specification; otherwise, false.</returns>
        </member>
        <member name="M:Core.Design.Specification`1.And(Core.Design.Specification{`0})">
            <summary>
            Combines this specification with another using a binary AND.
            </summary>
            <param name="specification">The other specification to combine with this specification.</param>
            <returns>A binary AND of the two specifications.</returns>
        </member>
        <member name="M:Core.Design.Specification`1.Or(Core.Design.Specification{`0})">
            <summary>
            Combines this specification with another using binary OR.
            </summary>
            <param name="specification">The other specification to combine with this specification.</param>
            <returns>A binary OR of the two specifications.</returns>
        </member>
        <member name="M:Core.Design.Specification`1.Not">
            <summary>
            Negates this specification using binary NOT.
            </summary>
            <returns>A binary NOT negated specification.</returns>
        </member>
        <member name="M:Core.Design.Specification`1.ToExpression">
            <summary>
            Provides an expression for the specification.
            </summary>
            <returns>An expression for the specification.</returns>
        </member>
        <member name="T:Core.HashCode">
            <summary>
            Provides a mechanism for creating object hash codes.
            </summary>
        </member>
        <member name="F:Core.HashCode.instance">
            <summary>
            The internal <see cref="T:Core.HashCode"/> instance.
            </summary>
        </member>
        <member name="F:Core.HashCode.prime">
            <summary>
            The hash prime.
            </summary>
        </member>
        <member name="F:Core.HashCode.offset">
            <summary>
            The hash offset.
            </summary>
        </member>
        <member name="M:Core.HashCode.#ctor">
            <summary>
            Prevents instances of <see cref="T:Core.HashCode"/> from being created.
            </summary>
        </member>
        <member name="M:Core.HashCode.GetHashCode(System.Object[])">
            <summary>
            Returns a hash code, computed from the input arguments.
            </summary>
            <param name="args">The input arguments.</param>
            <returns>A hash code.</returns>
        </member>
        <member name="M:Core.HashCode.ComputeHash(System.Int32[])">
            <summary>
            Computes a hash code from the input arguments, using the FNV-1a algorithm.
            </summary>
            <param name="args">The input arguments.</param>
            <returns>A hash code.</returns>
        </member>
        <member name="T:Core.Linq.IEnumerableExtensions">
            <summary>
            Provides extension methods for <see cref="T:System.Collections.Generic.IEnumerable`1" />.
            </summary>
        </member>
        <member name="M:Core.Linq.IEnumerableExtensions.ForEach``1(System.Collections.Generic.IEnumerable{``0},System.Action{``0})">
            <summary>
            Performs the specified action on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.
            </summary>
            <typeparam name="T">The underlying type for the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> upon which to invoke the <see cref="T:System.Action`1"/>.</param>
            <param name="action">The <see cref="T:System.Action`1"/> delegate to perform on each element of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</param>
        </member>
        <member name="M:Core.Linq.IEnumerableExtensions.ToLinkedList``1(System.Collections.Generic.IEnumerable{``0})">
            <summary>
            Converts an <see cref="T:System.Collections.Generic.IEnumerable`1"/> to a <see cref="T:System.Collections.Generic.LinkedList`1"/>.
            </summary>
            <typeparam name="T">The underlying type of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</typeparam>
            <param name="enumerable">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> collection.</param>
            <returns>A new instance of <see cref="T:System.Collections.Generic.LinkedList`1"/> containing the values of the <see cref="T:System.Collections.Generic.IEnumerable`1"/>.</returns>
        </member>
        <member name="T:Core.Measurement.DataSize">
            <summary>
            Represents data size from bits to Geopbytes.
            </summary>
        </member>
        <member name="F:Core.Measurement.DataSize.Zero">
            <summary>
            Represents a zero (0) <see cref="T:Core.Measurement.DataSize"/> value.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.Value">
            <summary>
            The underlying data size value.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.Bits">
            <summary>
            Gets the data size in Bits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.Bytes">
            <summary>
            Gets the data size in Bytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.KiloBits">
            <summary>
            Gets the data size in KiloBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.KiloBytes">
            <summary>
            Gets the data size in KiloBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.MegaBits">
            <summary>
            Gets the data size in MegaBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.MegaBytes">
            <summary>
            Gets the data size in MegaBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.GigaBits">
            <summary>
            Gets the data size in GigaBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.GigaBytes">
            <summary>
            Gets the data size in GigaBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.TeraBits">
            <summary>
            Gets the data size in TeraBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.TeraBytes">
            <summary>
            Gets the data size in TeraBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.PetaBits">
            <summary>
            Gets the data size in PetaBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.PetaBytes">
            <summary>
            Gets the data size in PetaBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.ExaBits">
            <summary>
            Gets the data size in ExaBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.ExaBytes">
            <summary>
            Gets the data size in ExaBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.ZettaBits">
            <summary>
            Gets the data size in ZettaBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.ZettaBytes">
            <summary>
            Gets the data size in ZettaBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.YottaBits">
            <summary>
            Gets the data size in YottaBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.YottaBytes">
            <summary>
            Gets the data size in YottaBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.BrontoBits">
            <summary>
            Gets the data size in BrontoBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.BrontoBytes">
            <summary>
            Gets the data size in BrontoBytes.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.GeopBits">
            <summary>
            Gets the data size in GeopBits.
            </summary>
        </member>
        <member name="P:Core.Measurement.DataSize.GeopBytes">
            <summary>
            Gets the data size in GeopBytes.
            </summary>
        </member>
        <member name="M:Core.Measurement.DataSize.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Measurement.DataSize" /> struct.
            </summary>
            <param name="value">The value in value in bits with which to initialize the instance.</param>
        </member>
        <member name="M:Core.Measurement.DataSize.op_Equality(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Performs an equality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_Inequality(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Performs an inequality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_GreaterThan(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Performs a greater than comparison check between two instances of <see cref="T:Core.Measurement.DataSize"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is greater than b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_LessThan(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Performs a less than comparison check between two instances of <see cref="T:Core.Measurement.DataSize"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is less than b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_GreaterThanOrEqual(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Performs a greater than or equal to comparison check between two instances of <see cref="T:Core.Measurement.DataSize"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is greater than or equal to b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_LessThanOrEqual(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Performs a less than or equal to comparison check between two instances of <see cref="T:Core.Measurement.DataSize"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is less than or equal to b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_Addition(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Adds two instances of <see cref="T:Core.Measurement.DataSize"/> together.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum addition of two instances of <see cref="T:Core.Measurement.DataSize"/>.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_Subtraction(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Subtracts one instance of <see cref="T:Core.Measurement.DataSize"/> from another.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum subtraction of two instances of <see cref="T:Core.Measurement.DataSize"/>.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_Multiply(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Multiplies two instances of <see cref="T:Core.Measurement.DataSize"/> together.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum multiplication of two instances of <see cref="T:Core.Measurement.DataSize"/>.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.op_Division(Core.Measurement.DataSize,Core.Measurement.DataSize)">
            <summary>
            Divides one instance of <see cref="T:Core.Measurement.DataSize"/> by another.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum division of two instances of <see cref="T:Core.Measurement.DataSize"/>.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a Bits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a Bytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromKiloBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a KiloBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromKiloBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a KiloBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromMegaBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a MegaBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromMegaBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a MegaBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromGigaBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a GigaBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromGigaBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a GigaBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromTeraBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a TeraBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromTeraBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a TeraBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromPetaBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a PetaBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromPetaBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a PetaBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromExaBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a ExaBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromExaBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a ExaBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromZettaBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a ZettaBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromZettaBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a ZettaBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromYottaBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a YottaBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromYottaBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a YottaBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromBrontoBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a BrontoBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromBrontoBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a BrontoBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromGeopBits(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a GeopBits value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.FromGeopBytes(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.DataSize"/> instance from a GeopBytes value.
            </summary>
            <param name="value">The value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.CreateFromValue(System.Double,System.Int32,System.Boolean)">
            <summary>
            Creates a new instance of <see cref="T:Core.Measurement.DataSize"/> given an initial value.
            </summary>
            <param name="value">The value from which to construct a new instance.</param>
            <param name="power">The power from which to construct a new instance.</param>
            <param name="isByteValue">Determines whether the calculation is in bits or bytes.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.Add(Core.Measurement.DataSize)">
            <summary>
            Adds another <see cref="T:Core.Measurement.DataSize"/> value to this and returns the value in a new <see cref="T:Core.Measurement.DataSize"/> instance.
            </summary>
            <param name="value">The <see cref="T:Core.Measurement.DataSize"/> value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> containing the sum of the two values.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.Subtract(Core.Measurement.DataSize)">
            <summary>
            Subtracts another <see cref="T:Core.Measurement.DataSize"/> value from this and returns the value in a new <see cref="T:Core.Measurement.DataSize"/> instance.
            </summary>
            <param name="value">The <see cref="T:Core.Measurement.DataSize"/> value to subtract from this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.DataSize"/> containing the sum of the two values.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.Equals(Core.Measurement.DataSize)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="other">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.GetHashCode">
            <summary>
            Serves as a hash code function for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:Core.Measurement.DataSize.GetValue(System.Int32,System.Boolean)">
            <summary>
            Gets the value of this <see cref="T:Core.Measurement.DataSize"/> instance.
            </summary>
            <param name="power">The power of the calculation to perform</param>
            <param name="isByteValue">Determines whether the calculation is in bits or bytes.</param>
            <returns>A value containing the result of the calculation.</returns>
        </member>
        <member name="T:Core.Measurement.Distance">
            <summary>
            Represents distance scale.
            </summary>
        </member>
        <member name="F:Core.Measurement.Distance.Zero">
            <summary>
            Represents a zero (0) <see cref="T:Core.Measurement.Distance"/> value.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Value">
            <summary>
            The underlying distance value.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Millimeters">
            <summary>
            Gets the distance in millimeters.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Centimeters">
            <summary>
            Gets the distance in centimeters.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Meters">
            <summary>
            Gets the distance in meters.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Kilometers">
            <summary>
            Gets the distance in kilometers.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Inches">
            <summary>
            Gets the distance in inches.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Feet">
            <summary>
            Gets the distance in feet.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Yards">
            <summary>
            Gets the distance in yards.
            </summary>
        </member>
        <member name="P:Core.Measurement.Distance.Miles">
            <summary>
            Gets the distance in miles.
            </summary>
        </member>
        <member name="M:Core.Measurement.Distance.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Measurement.Distance" /> struct.
            </summary>
            <param name="value">The value in millimeters with which to initialize the instance.</param>
        </member>
        <member name="M:Core.Measurement.Distance.op_Equality(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Performs an equality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_Inequality(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Performs an inequality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_GreaterThan(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Performs a greater than comparison check between two instances of <see cref="T:Core.Measurement.Distance"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is greater than b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_LessThan(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Performs a less than comparison check between two instances of <see cref="T:Core.Measurement.Distance"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is less than b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_GreaterThanOrEqual(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Performs a greater than or equal to comparison check between two instances of <see cref="T:Core.Measurement.Distance"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is greater than or equal to b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_LessThanOrEqual(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Performs a less than or equal to comparison check between two instances of <see cref="T:Core.Measurement.Distance"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is less than or equal to b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_Addition(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Adds two instances of Distance together.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum addition of two instances of <see cref="T:Core.Measurement.Distance"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_Subtraction(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Subtracts one instance of Distance from another.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum subtraction of two instances of <see cref="T:Core.Measurement.Distance"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_Multiply(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Multiplies two instances of Distance together.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum multiplication of two instances of <see cref="T:Core.Measurement.Distance"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.op_Division(Core.Measurement.Distance,Core.Measurement.Distance)">
            <summary>
            Divides one instance of Distance from another.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum division of two instances of <see cref="T:Core.Measurement.Distance"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromMillimeters(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a millimeter value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromCentimeters(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a centimeter value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromMeters(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a meter value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromKilometers(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a kilometer value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromInches(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from an inch value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromFeet(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a feet value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromYards(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a yard value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.FromMiles(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Distance"/> instance from a mile value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Distance"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Distance"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.Add(Core.Measurement.Distance)">
            <summary>
            Adds another <see cref="T:Core.Measurement.Distance"/> value to this and returns the value in a new <see cref="T:Core.Measurement.Distance"/> instance.
            </summary>
            <param name="value">The <see cref="T:Core.Measurement.Distance"/> value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.Distance"/> containing the sum of the two values.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.Subtract(Core.Measurement.Distance)">
            <summary>
            Subtracts another <see cref="T:Core.Measurement.Distance"/> value from this and returns the value in a new <see cref="T:Core.Measurement.Distance"/> instance.
            </summary>
            <param name="value">The <see cref="T:Core.Measurement.Distance"/> value to subtract from this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.Distance"/> containing the sum of the two values.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.Equals(Core.Measurement.Distance)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="other">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Distance.GetHashCode">
            <summary>
            Serves as a hash code function for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="T:Core.Measurement.Temperature">
            <summary>
            Represents temperature scale. The default value is absolute zero, or 0°K.
            </summary>
        </member>
        <member name="F:Core.Measurement.Temperature.AbsoluteZero">
            <summary>
            Represents an absolute zero (0°K) <see cref="T:Core.Measurement.Temperature"/> value.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Value">
            <summary>
            The underlying temperature value.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Celsius">
            <summary>
            Gets the temperature in Celsius.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Delisle">
            <summary>
            Gets the temperature in Delisle.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Fahrenheit">
            <summary>
            Gets the temperature in Fahrenheit.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Kelvin">
            <summary>
            Gets the temperature in kelvin.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Newton">
            <summary>
            Gets the temperature in newton.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Reaumur">
            <summary>
            Gets the temperature in Reaumur.
            </summary>
        </member>
        <member name="P:Core.Measurement.Temperature.Rankine">
            <summary>
            Gets the temperature in Rankine.
            </summary>
        </member>
        <member name="M:Core.Measurement.Temperature.#ctor(System.Double)">
            <summary>
            Initializes a new instance of the <see cref="T:Core.Measurement.Temperature" /> struct.
            </summary>
            <param name="value">The value in Kelvin with which to initialize the instance.</param>
        </member>
        <member name="M:Core.Measurement.Temperature.op_Equality(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Performs an equality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_Inequality(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Performs an inequality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_GreaterThan(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Performs a greater than comparison check between two instances of <see cref="T:Core.Measurement.Temperature"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is greater than b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_LessThan(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Performs a less than comparison check between two instances of <see cref="T:Core.Measurement.Temperature"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is less than b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_GreaterThanOrEqual(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Performs a greater than or equal to comparison check between two instances of <see cref="T:Core.Measurement.Temperature"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is greater than or equal to b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_LessThanOrEqual(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Performs a less than or equal to comparison check between two instances of <see cref="T:Core.Measurement.Temperature"/>.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if a is less than or equal to b, otherwise False.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_Addition(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Adds two instances of Temperature together.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum addition of two instances of <see cref="T:Core.Measurement.Temperature"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_Subtraction(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Subtracts one instance of Temperature from another.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum subtraction of two instances of <see cref="T:Core.Measurement.Temperature"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_Multiply(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Multiplies two instances of Temperature together.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum multiplication of two instances of <see cref="T:Core.Measurement.Temperature"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.op_Division(Core.Measurement.Temperature,Core.Measurement.Temperature)">
            <summary>
            Divides one instance of Temperature from another.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>The sum division of two instances of <see cref="T:Core.Measurement.Temperature"/>.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromCelsius(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Celsius value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromDelisle(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Delisle value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromFahrenheit(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Fahrenheit value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromKelvin(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Kelvin value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromNewton(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Newton value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromReaumur(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Reaumur value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.FromRankine(System.Double)">
            <summary>
            Creates a new <see cref="T:Core.Measurement.Temperature"/> instance from a Rankine value.
            </summary>
            <param name="value">The value from which to construct the new <see cref="T:Core.Measurement.Temperature"/> instance.</param>
            <returns>A newly created <see cref="T:Core.Measurement.Temperature"/> instance.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.Add(Core.Measurement.Temperature)">
            <summary>
            Adds another <see cref="T:Core.Measurement.Temperature"/> value to this and returns the value in a new <see cref="T:Core.Measurement.Temperature"/> instance.
            </summary>
            <param name="value">The <see cref="T:Core.Measurement.Temperature"/> value to add to this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.Temperature"/> containing the sum of the two values.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.Subtract(Core.Measurement.Temperature)">
            <summary>
            Subtracts another <see cref="T:Core.Measurement.Temperature"/> value from this and returns the value in a new <see cref="T:Core.Measurement.Temperature"/> instance.
            </summary>
            <param name="value">The <see cref="T:Core.Measurement.Temperature"/> value to subtract from this instance.</param>
            <returns>A new <see cref="T:Core.Measurement.Temperature"/> containing the difference of the two values.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.Equals(Core.Measurement.Temperature)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="other">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Measurement.Temperature.GetHashCode">
            <summary>
            Serves as a hash code function for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Hash">
            <summary>
            Represents a hash.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Hash.data">
            <summary>
            The hash data.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.#ctor(System.Byte[])">
            <summary>
            Prevents an instance of <see cref="T:Core.Security.Cryptography.Hash"/> from being created.
            </summary>
            <param name="data">The hash data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.op_Equality(Core.Security.Cryptography.Hash,Core.Security.Cryptography.Hash)">
            <summary>
            Performs an equality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.op_Inequality(Core.Security.Cryptography.Hash,Core.Security.Cryptography.Hash)">
            <summary>
            Performs an inequality check between two object instances.
            </summary>
            <param name="a">Instance a.</param>
            <param name="b">Instance b.</param>
            <returns>True if the instances are not equal; otherwise, false.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.FromBytes(System.Byte[])">
            <summary>
            Creates a <see cref="T:Core.Security.Cryptography.Hash"/> instance from a <see cref="T:System.Byte"/> array.
            </summary>
            <param name="value">The <see cref="T:System.Byte"/> array to represent as a hash.</param>
            <returns>A new <see cref="T:Core.Security.Cryptography.Hash"/> instance.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.Parse(System.String)">
            <summary>
            Converts the string representation of a hash to its <see cref="T:Core.Security.Cryptography.Hash"/> equivalent.
            </summary>
            <param name="value">A <see cref="T:System.String"/> that contains a hash to convert.</param>
            <returns>A new <see cref="T:Core.Security.Cryptography.Hash"/> instance.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.Equals(Core.Security.Cryptography.Hash)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="other">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.Equals(System.Object)">
            <summary>
            Checks for equality between this instance and another object.
            </summary>
            <param name="obj">The object to check for equality.</param>
            <returns>true if the object is equal to this instance; otherwise, false.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.GetHashCode">
            <summary>
            Serves as a hash code function for this instance.
            </summary>
            <returns>A hash code for this instance.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.ToString">
            <summary>
            Returns a <see cref="T:System.String"/> that represents the current object.
            </summary>
            <returns>A <see cref="T:System.String"/> that represents the current object.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.Hash.ToByteArray">
            <summary>
            Returns a byte array representing this instance.
            </summary>
            <returns>A byte array.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Keccak224Managed">
            <summary>
            Computes the SHA3 Keccak 224 hash for the input data using the managed library.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Keccak224Managed.sponge">
            <summary>
            The Keccak sponge instance.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak224Managed.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:Core.Security.Cryptography.Keccak224Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak224Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak224Managed.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Keccak256Managed">
            <summary>
            Computes the SHA3 Keccak 256 hash for the input data using the managed library.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Keccak256Managed.sponge">
            <summary>
            The Keccak sponge instance.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak256Managed.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:Core.Security.Cryptography.Keccak256Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak256Managed.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Keccak384Managed">
            <summary>
            Computes the SHA3 Keccak 384 hash for the input data using the managed library.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Keccak384Managed.sponge">
            <summary>
            The Keccak sponge instance.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak384Managed.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:Core.Security.Cryptography.Keccak384Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak384Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak384Managed.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Keccak512Managed">
            <summary>
            Computes the SHA3 Keccak 512 hash for the input data using the managed library.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Keccak512Managed.sponge">
            <summary>
            The Keccak sponge instance.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak512Managed.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:Core.Security.Cryptography.Keccak224Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak512Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Keccak512Managed.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.KeccakSpongeManaged">
            <summary>
            Represents a managed implementation of the Keccak sponge function and permutation.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.KeccakDelimiter">
            <summary>
            The delimiter used for Keccak hash implementations.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.ShakeDelimiter">
            <summary>
            The delimiter used for Shake hash implementations.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.KeccakRounds">
            <summary>
            The number of Keccak rounds.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.IotaRoundConstants">
            <summary>
            The Iota permutation round constants.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.rateBytes">
            <summary>
            The rate in bytes of the sponge state.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.capacityBytes">
            <summary>
            The capacity in bytes of the sponge state.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.delimiter">
            <summary>
            The state delimiter.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.outputLength">
            <summary>
            The output length of the hash.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.blockSize">
            <summary>
            The state block size.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.inputPointer">
            <summary>
            The state input pointer.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.outputPointer">
            <summary>
            The state output pointer.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.state">
            <summary>
            The state.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.KeccakSpongeManaged.result">
            <summary>
            The hash result.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.KeccakSpongeManaged.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Core.Security.Cryptography.KeccakSpongeManaged"/> class.
            </summary>
            <param name="rateBytes">The rate in bytes of the sponge state.</param>
            <param name="capacityBytes">The capacity in bytes of the sponge state.</param>
            <param name="delimiter">The state delimiter.</param>
            <param name="outputLength">The output length of the hash.</param>
        </member>
        <member name="M:Core.Security.Cryptography.KeccakSpongeManaged.Initialize">
            <summary>
            Initializes the sponge state.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.KeccakSpongeManaged.Absorb(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Absorbs data into the sponge state.
            </summary>
            <param name="array">The array of bytes to absorb.</param>
            <param name="start">The start index within the byte array.</param>
            <param name="size">The block size, or length of bytes to absorb.</param>
        </member>
        <member name="M:Core.Security.Cryptography.KeccakSpongeManaged.Squeeze">
            <summary>
            Squeezes the hash out of the sponge state.
            </summary>
            <returns>A hash of the input data.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.KeccakSpongeManaged.Permute(System.UInt64[])">
            <summary>
            Performs the Keccak permutation.
            </summary>
            <param name="state">The state upon which to perform the permutation.</param>
        </member>
        <member name="M:Core.Security.Cryptography.KeccakSpongeManaged.Rotl64(System.UInt64,System.Byte)">
            <summary>
            Rotates a 64-bit integer left.
            </summary>
            <param name="x">The 64-bit integer to rotate.</param>
            <param name="y">The value to rotate by.</param>
            <returns>A logically rotated 64-bit integer.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.SHA3">
            <summary>
            Computes the SHA3 hash for the input data.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.SHA3.CreateKeccak224">
            <summary>
            Creates an instance of the default implementation of SHA3 Keccak 224.
            </summary>
            <returns>A new instance of the default implementation of SHA3 Keccak 224.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.SHA3.CreateKeccak256">
            <summary>
            Creates an instance of the default implementation of SHA3 Keccak 256.
            </summary>
            <returns>A new instance of the default implementation of SHA3 Keccak 256.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.SHA3.CreateKeccak384">
            <summary>
            Creates an instance of the default implementation of SHA3 Keccak 384.
            </summary>
            <returns>A new instance of the default implementation of SHA3 Keccak 384.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.SHA3.CreateKeccak512">
            <summary>
            Creates an instance of the default implementation of SHA3 Keccak 512.
            </summary>
            <returns>A new instance of the default implementation of SHA3 Keccak 512.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.SHA3.CreateShake128(System.Int32)">
            <summary>
            Creates an instance of the default implementation of SHA3 Shake 128.
            </summary>
            <returns>A new instance of the default implementation of SHA3 Shake 128.</returns>
        </member>
        <member name="M:Core.Security.Cryptography.SHA3.CreateShake256(System.Int32)">
            <summary>
            Creates an instance of the default implementation of SHA3 Shake 256.
            </summary>
            <returns>A new instance of the default implementation of SHA3 Shake 256.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Shake128Managed">
            <summary>
            Computes the SHA3 Shake 128 hash for the input data using the managed library.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Shake128Managed.sponge">
            <summary>
            The Keccak sponge instance.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Shake128Managed.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Core.Security.Cryptography.Shake128Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Shake128Managed.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:Core.Security.Cryptography.Shake128Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Shake128Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Shake128Managed.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Core.Security.Cryptography.Shake256Managed">
            <summary>
            Computes the SHA3 Shake 256 hash for the input data using the managed library.
            </summary>
        </member>
        <member name="F:Core.Security.Cryptography.Shake256Managed.sponge">
            <summary>
            The Keccak sponge instance.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Shake256Managed.#ctor(System.Int32)">
            <summary>
            Creates a new instance of the <see cref="T:Core.Security.Cryptography.Shake256Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Shake256Managed.Initialize">
            <summary>
            Initializes an implementation of the <see cref="T:Core.Security.Cryptography.Shake256Managed"/> class.
            </summary>
        </member>
        <member name="M:Core.Security.Cryptography.Shake256Managed.HashCore(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Routes data written to the object into the hash algorithm for computing the hash.
            </summary>
            <param name="array">The input to compute the hash code for.</param>
            <param name="ibStart">The offset into the byte array from which to begin using data.</param>
            <param name="cbSize">The number of bytes in the byte array to use as data.</param>
        </member>
        <member name="M:Core.Security.Cryptography.Shake256Managed.HashFinal">
            <summary>
            Finalizes the hash computation after the last data is processed by the cryptographic stream object.
            </summary>
            <returns>The computed hash code.</returns>
        </member>
        <member name="T:Core.StringExtensions">
            <summary>
            Represents <see cref="T:System.String"/> extension methods defined by the CORE library.
            </summary>
        </member>
        <member name="M:Core.StringExtensions.ToByteArray(System.String,System.Text.Encoding)">
            <summary>
            Converts this instance to a byte array.
            </summary>
            <param name="value">The value to convert.</param>
            <param name="encoding">The encoding to use for conversion.</param>
            <returns>A byte array representation of this string.</returns>
        </member>
        <member name="M:Core.StringExtensions.ToByteArray(System.String)">
            <summary>
            Converts this instance to a byte array using the default encoding.
            </summary>
            <param name="value">The encoding to use for conversion.</param>
            <returns>A byte array representation of this string.</returns>
        </member>
    </members>
</doc>
